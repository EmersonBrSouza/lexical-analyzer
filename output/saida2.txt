Lista de Tokens:
----------------------------------------------------------------------

1 const Reserved Word
1 { Delimiter
2 int Reserved Word
2 a Identifier
2 2 Number
2 ; Delimiter
3 boolean Reserved Word
3 a Identifier
3 true Reserved Word
3 ; Delimiter
4 string Reserved Word
4 c Identifier
4 2 Number
4 ; Delimiter
5 } Delimiter
7 typedef Reserved Word
7 struct Reserved Word
7 o Identifier
7 { Delimiter
8 int Reserved Word
8 b Identifier
8 ; Delimiter
9 int Reserved Word
9 a Identifier
9 ; Delimiter
10 } Delimiter
12 var Reserved Word
12 { Delimiter
13 int Reserved Word
13 c Identifier
13 = Attribuition Operator
13 4 Number
13 ; Delimiter
14 int Reserved Word
14 a Identifier
14 = Attribuition Operator
14 2 Number
14 ; Delimiter
15 int Reserved Word
15 a Identifier
15 [ Delimiter
15 a Identifier
15 ] Delimiter
15 [ Delimiter
15 100 Number
15 ] Delimiter
15 ; Delimiter
16 int Reserved Word
16 b Identifier
16 [ Delimiter
16 c Identifier
16 ] Delimiter
16 [ Delimiter
16 2 Number
16 ] Delimiter
16 ; Delimiter
17 } Delimiter
20 function Reserved Word
20 int Reserved Word
20 a Identifier
20 ( Delimiter
20 int Reserved Word
20 a Identifier
20 , Delimiter
20 real Reserved Word
20 b Identifier
20 [ Delimiter
20 ] Delimiter
20 [ Delimiter
20 ] Delimiter
20 ) Delimiter
20 { Delimiter
22 var Reserved Word
22 { Delimiter
23 int Reserved Word
23 b Identifier
23 = Attribuition Operator
23 c Identifier
23 ; Delimiter
24 } Delimiter
26 local Reserved Word
26 . Delimiter
26 a Identifier
26 ( Delimiter
26 a Identifier
26 , Delimiter
26 d Identifier
26 , Delimiter
26 d Identifier
26 ) Delimiter
26 ; Delimiter
27 print Reserved Word
27 ( Delimiter
27 aa Identifier
27 ) Delimiter
27 ; Delimiter
28 read Reserved Word
28 ( Delimiter
28 pp Identifier
28 , Delimiter
28 m Identifier
28 ) Delimiter
28 ; Delimiter
30 while Reserved Word
30 ( Delimiter
30 b Identifier
30 == Relational Operator
30 -2 Number
30 ) Delimiter
30 { Delimiter
31 op Identifier
31 = Attribuition Operator
31 2 Number
31 ; Delimiter
32 } Delimiter
35 if Reserved Word
35 ( Delimiter
35 d Identifier
35 ) Delimiter
35 then Reserved Word
35 { Delimiter
36 c Identifier
36 = Attribuition Operator
36 c Identifier
36 ++ Arithmetic Increment Operator
36 ; Delimiter
37 } Delimiter
37 else Reserved Word
37 { Delimiter
38 print Reserved Word
38 ( Delimiter
38 d Identifier
38 ) Delimiter
38 ; Delimiter
39 } Delimiter
41 if Reserved Word
41 ( Delimiter
41 c Identifier
41 ) Delimiter
41 then Reserved Word
41 { Delimiter
43 } Delimiter
43 else Reserved Word
43 { Delimiter
44 print Reserved Word
44 ( Delimiter
44 d Identifier
44 ) Delimiter
44 ; Delimiter
45 } Delimiter
47 print Reserved Word
47 ( Delimiter
47 d Identifier
47 ) Delimiter
47 ; Delimiter
48 read Reserved Word
48 ( Delimiter
48 c Identifier
48 ) Delimiter
48 ; Delimiter
50 return Reserved Word
50 5 Number
50 + Arithmetic Operator
50 2 Number
50 ; Delimiter
51 } Delimiter
53 procedure Reserved Word
53 o Identifier
53 ( Delimiter
53 int Reserved Word
53 p Identifier
53 ) Delimiter
53 { Delimiter
54 var Reserved Word
54 { Delimiter
55 int Reserved Word
55 b Identifier
55 = Attribuition Operator
55 c Identifier
55 ; Delimiter
56 } Delimiter
58 local Reserved Word
58 . Delimiter
58 a Identifier
58 ( Delimiter
58 a Identifier
58 , Delimiter
58 d Identifier
58 , Delimiter
58 d Identifier
58 ) Delimiter
58 ; Delimiter
59 print Reserved Word
59 ( Delimiter
59 aa Identifier
59 ) Delimiter
59 ; Delimiter
61 print Reserved Word
61 ( Delimiter
61 "a" String
61 ) Delimiter
61 ; Delimiter
62 read Reserved Word
62 ( Delimiter
62 c Identifier
62 ) Delimiter
62 ; Delimiter
63 } Delimiter
65 function Reserved Word
65 int Reserved Word
65 opa Identifier
65 ( Delimiter
65 int Reserved Word
65 a Identifier
65 ) Delimiter
65 { Delimiter
66 return Reserved Word
66 bem Identifier
66 ; Delimiter
67 } Delimiter
69 procedure Reserved Word
69 ok Identifier
69 ( Delimiter
69 int Reserved Word
69 b Identifier
69 ) Delimiter
69 { Delimiter
70 if Reserved Word
70 ( Delimiter
70 d Identifier
70 == Relational Operator
70 e Identifier
70 ) Delimiter
70 then Reserved Word
70 { Delimiter
71 o Identifier
71 = Attribuition Operator
71 0 Number
71 ; Delimiter
72 } Delimiter
73 } Delimiter
75 start Reserved Word
75 ( Delimiter
75 ) Delimiter
75 { Delimiter
76 var Reserved Word
76 { Delimiter
77 int Reserved Word
77 b Identifier
77 [ Delimiter
77 3 Number
77 ] Delimiter
77 ; Delimiter
78 } Delimiter
80 local Reserved Word
80 . Delimiter
80 a Identifier
80 ( Delimiter
80 a Identifier
80 , Delimiter
80 2 Number
80 , Delimiter
80 "d" String
80 ) Delimiter
80 ; Delimiter
81 print Reserved Word
81 ( Delimiter
81 aa Identifier
81 ) Delimiter
81 ; Delimiter
83 print Reserved Word
83 ( Delimiter
83 "a" String
83 ) Delimiter
83 ; Delimiter
84 read Reserved Word
84 ( Delimiter
84 c Identifier
84 ) Delimiter
84 ; Delimiter
85 } Delimiter
----------------------------------------------------------------------


Lista de Erros Léxicos:
----------------------------------------------------------------------


Lista de Erros Sintáticos:

----------------------------------------------------------------------

