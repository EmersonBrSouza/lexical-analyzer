Lista de Tokens:
----------------------------------------------------------------------

1 const Reserved Word
1 { Delimiter
2 int Reserved Word
2 a Identifier
2 2 Number
2 ; Delimiter
3 boolean Reserved Word
3 a Identifier
3 true Reserved Word
3 ; Delimiter
4 string Reserved Word
4 c Identifier
4 2 Number
4 ; Delimiter
5 } Delimiter
7 typedef Reserved Word
7 struct Reserved Word
7 a Identifier
7 { Delimiter
8 int Reserved Word
8 b Identifier
8 ; Delimiter
9 int Reserved Word
9 a Identifier
9 ; Delimiter
10 } Delimiter
12 typedef Reserved Word
12 struct Reserved Word
12 o Identifier
12 extends Reserved Word
12 a Identifier
12 { Delimiter
13 int Reserved Word
13 b Identifier
13 ; Delimiter
14 int Reserved Word
14 c Identifier
14 ; Delimiter
15 } Delimiter
19 var Reserved Word
19 { Delimiter
20 int Reserved Word
20 c Identifier
20 = Attribuition Operator
20 4 Number
20 ; Delimiter
21 int Reserved Word
21 d Identifier
21 = Attribuition Operator
21 2 Number
21 ; Delimiter
22 int Reserved Word
22 c Identifier
22 [ Delimiter
22 a Identifier
22 ] Delimiter
22 [ Delimiter
22 100 Number
22 ] Delimiter
22 ; Delimiter
23 int Reserved Word
23 b Identifier
23 [ Delimiter
23 c Identifier
23 ] Delimiter
23 [ Delimiter
23 2 Number
23 ] Delimiter
23 ; Delimiter
24 } Delimiter
27 function Reserved Word
27 int Reserved Word
27 a Identifier
27 ( Delimiter
27 int Reserved Word
27 a Identifier
27 , Delimiter
27 real Reserved Word
27 b Identifier
27 [ Delimiter
27 ] Delimiter
27 [ Delimiter
27 ] Delimiter
27 ) Delimiter
27 { Delimiter
29 var Reserved Word
29 { Delimiter
30 int Reserved Word
30 b Identifier
30 = Attribuition Operator
30 c Identifier
30 ; Delimiter
31 } Delimiter
33 local Reserved Word
33 . Delimiter
33 a Identifier
33 ( Delimiter
33 a Identifier
33 , Delimiter
33 d Identifier
33 , Delimiter
33 d Identifier
33 ) Delimiter
33 ; Delimiter
34 print Reserved Word
34 ( Delimiter
34 aa Identifier
34 ) Delimiter
34 ; Delimiter
35 read Reserved Word
35 ( Delimiter
35 pp Identifier
35 , Delimiter
35 m Identifier
35 ) Delimiter
35 ; Delimiter
37 while Reserved Word
37 ( Delimiter
37 b Identifier
37 == Relational Operator
37 -2 Number
37 ) Delimiter
37 { Delimiter
38 op Identifier
38 = Attribuition Operator
38 2 Number
38 ; Delimiter
39 } Delimiter
42 if Reserved Word
42 ( Delimiter
42 d Identifier
42 ) Delimiter
42 then Reserved Word
42 { Delimiter
43 c Identifier
43 = Attribuition Operator
43 c Identifier
43 ++ Arithmetic Increment Operator
43 ; Delimiter
44 } Delimiter
44 else Reserved Word
44 { Delimiter
45 print Reserved Word
45 ( Delimiter
45 d Identifier
45 ) Delimiter
45 ; Delimiter
46 } Delimiter
48 if Reserved Word
48 ( Delimiter
48 c Identifier
48 ) Delimiter
48 then Reserved Word
48 { Delimiter
50 } Delimiter
50 else Reserved Word
50 { Delimiter
51 print Reserved Word
51 ( Delimiter
51 d Identifier
51 ) Delimiter
51 ; Delimiter
52 } Delimiter
54 print Reserved Word
54 ( Delimiter
54 d Identifier
54 ) Delimiter
54 ; Delimiter
55 read Reserved Word
55 ( Delimiter
55 c Identifier
55 ) Delimiter
55 ; Delimiter
57 return Reserved Word
57 5 Number
57 + Arithmetic Operator
57 2 Number
57 ; Delimiter
58 } Delimiter
60 procedure Reserved Word
60 o Identifier
60 ( Delimiter
60 int Reserved Word
60 p Identifier
60 ) Delimiter
60 { Delimiter
61 var Reserved Word
61 { Delimiter
62 int Reserved Word
62 b Identifier
62 = Attribuition Operator
62 c Identifier
62 ; Delimiter
63 } Delimiter
65 local Reserved Word
65 . Delimiter
65 a Identifier
65 ( Delimiter
65 a Identifier
65 , Delimiter
65 d Identifier
65 , Delimiter
65 d Identifier
65 ) Delimiter
65 ; Delimiter
66 print Reserved Word
66 ( Delimiter
66 aa Identifier
66 ) Delimiter
66 ; Delimiter
68 print Reserved Word
68 ( Delimiter
68 "a" String
68 ) Delimiter
68 ; Delimiter
69 read Reserved Word
69 ( Delimiter
69 c Identifier
69 ) Delimiter
69 ; Delimiter
70 } Delimiter
72 function Reserved Word
72 int Reserved Word
72 opa Identifier
72 ( Delimiter
72 int Reserved Word
72 a Identifier
72 ) Delimiter
72 { Delimiter
73 return Reserved Word
73 bem Identifier
73 ; Delimiter
74 } Delimiter
76 procedure Reserved Word
76 ok Identifier
76 ( Delimiter
76 int Reserved Word
76 b Identifier
76 ) Delimiter
76 { Delimiter
77 if Reserved Word
77 ( Delimiter
77 d Identifier
77 == Relational Operator
77 e Identifier
77 ) Delimiter
77 then Reserved Word
77 { Delimiter
78 o Identifier
78 = Attribuition Operator
78 0 Number
78 ; Delimiter
79 } Delimiter
80 } Delimiter
82 start Reserved Word
82 ( Delimiter
82 ) Delimiter
82 { Delimiter
83 var Reserved Word
83 { Delimiter
84 int Reserved Word
84 b Identifier
84 [ Delimiter
84 3 Number
84 ] Delimiter
84 ; Delimiter
85 } Delimiter
87 local Reserved Word
87 . Delimiter
87 a Identifier
87 ( Delimiter
87 a Identifier
87 , Delimiter
87 2 Number
87 , Delimiter
87 "d" String
87 ) Delimiter
87 ; Delimiter
88 print Reserved Word
88 ( Delimiter
88 aa Identifier
88 ) Delimiter
88 ; Delimiter
90 print Reserved Word
90 ( Delimiter
90 "a" String
90 ) Delimiter
90 ; Delimiter
91 read Reserved Word
91 ( Delimiter
91 c Identifier
91 ) Delimiter
91 ; Delimiter
92 } Delimiter
----------------------------------------------------------------------


Lista de Erros Léxicos:
----------------------------------------------------------------------


Lista de Erros Sintáticos:

----------------------------------------------------------------------

