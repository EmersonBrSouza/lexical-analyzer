Lista de Tokens:
1 const Reserved Word
1 { Delimiter
2 int Reserved Word
2 a Identifier
2 2 Number
2 ; Delimiter
3 boolean Reserved Word
3 b Identifier
3 3 Number
3 ; Delimiter
4 } Delimiter
6 typedef Reserved Word
6 struct Reserved Word
6 o Identifier
6 { Delimiter
7 int Reserved Word
7 b Identifier
7 ; Delimiter
8 int Reserved Word
8 a Identifier
8 ; Delimiter
9 } Delimiter
11 var Reserved Word
11 { Delimiter
12 int Reserved Word
12 c Identifier
12 = Attribuition Operator
12 2 Number
12 ; Delimiter
13 int Reserved Word
13 a Identifier
13 = Attribuition Operator
13 2 Number
13 ; Delimiter
14 int Reserved Word
14 a Identifier
14 [ Delimiter
14 a Identifier
14 ] Delimiter
14 ; Delimiter
15 int Reserved Word
15 b Identifier
15 [ Delimiter
15 c Identifier
15 ] Delimiter
15 [ Delimiter
15 2 Number
15 ] Delimiter
15 ; Delimiter
16 } Delimiter
19 function Reserved Word
19 int Reserved Word
19 a Identifier
19 ( Delimiter
19 int Reserved Word
19 a Identifier
19 , Delimiter
19 real Reserved Word
19 b Identifier
19 [ Delimiter
19 ] Delimiter
19 [ Delimiter
19 ] Delimiter
19 ) Delimiter
19 { Delimiter
21 var Reserved Word
21 { Delimiter
22 int Reserved Word
22 b Identifier
22 = Attribuition Operator
22 c Identifier
22 ; Delimiter
23 } Delimiter
25 local Reserved Word
25 . Delimiter
25 a Identifier
25 ; Delimiter
26 print Reserved Word
26 ( Delimiter
26 aa Identifier
26 ) Delimiter
26 ; Delimiter
27 read Reserved Word
27 ( Delimiter
27 pp Identifier
27 , Delimiter
27 m Identifier
27 ) Delimiter
27 ; Delimiter
29 while Reserved Word
29 ( Delimiter
29 b Identifier
29 == Relational Operator
29 -2 Number
29 ) Delimiter
29 { Delimiter
30 op Identifier
30 = Attribuition Operator
30 2 Number
30 ; Delimiter
31 } Delimiter
34 if Reserved Word
34 ( Delimiter
34 c Identifier
34 < Relational Operator
34 d Identifier
34 ) Delimiter
34 then Reserved Word
34 { Delimiter
36 } Delimiter
36 else Reserved Word
36 { Delimiter
37 print Reserved Word
37 ( Delimiter
37 d Identifier
37 ) Delimiter
37 ; Delimiter
38 } Delimiter
40 if Reserved Word
40 ( Delimiter
40 c Identifier
40 ) Delimiter
40 then Reserved Word
40 { Delimiter
42 } Delimiter
42 else Reserved Word
42 { Delimiter
43 print Reserved Word
43 ( Delimiter
43 d Identifier
43 ) Delimiter
43 ; Delimiter
44 } Delimiter
51 return Reserved Word
51 o Identifier
51 ; Delimiter
52 } Delimiter
54 procedure Reserved Word
54 o Identifier
54 ( Delimiter
54 int Reserved Word
54 p Identifier
54 ) Delimiter
54 { Delimiter
56 } Delimiter
58 start Reserved Word
58 ( Delimiter
58 ) Delimiter
58 { Delimiter
60 } Delimiter

Lista de Erros:
