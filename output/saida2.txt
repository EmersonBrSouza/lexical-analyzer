Lista de Tokens:
----------------------------------------------------------------------

1 const Reserved Word
1 { Delimiter
2 int Reserved Word
2 a Identifier
2 2 Number
2 ; Delimiter
3 boolean Reserved Word
3 a Identifier
3 true Reserved Word
3 ; Delimiter
4 string Reserved Word
4 c Identifier
4 2 Number
4 ; Delimiter
5 } Delimiter
7 typedef Reserved Word
7 struct Reserved Word
7 o Identifier
7 extends Reserved Word
7 b Identifier
7 { Delimiter
8 int Reserved Word
8 b Identifier
8 ; Delimiter
9 int Reserved Word
9 a Identifier
9 ; Delimiter
10 } Delimiter
12 typedef Reserved Word
12 struct Reserved Word
12 a Identifier
12 { Delimiter
13 int Reserved Word
13 b Identifier
13 ; Delimiter
14 int Reserved Word
14 a Identifier
14 ; Delimiter
15 } Delimiter
17 var Reserved Word
17 { Delimiter
18 int Reserved Word
18 c Identifier
18 = Attribuition Operator
18 4 Number
18 ; Delimiter
19 int Reserved Word
19 d Identifier
19 = Attribuition Operator
19 2 Number
19 ; Delimiter
20 int Reserved Word
20 c Identifier
20 [ Delimiter
20 a Identifier
20 ] Delimiter
20 [ Delimiter
20 100 Number
20 ] Delimiter
20 ; Delimiter
21 int Reserved Word
21 b Identifier
21 [ Delimiter
21 c Identifier
21 ] Delimiter
21 [ Delimiter
21 2 Number
21 ] Delimiter
21 ; Delimiter
22 } Delimiter
25 function Reserved Word
25 int Reserved Word
25 a Identifier
25 ( Delimiter
25 int Reserved Word
25 a Identifier
25 , Delimiter
25 real Reserved Word
25 b Identifier
25 [ Delimiter
25 ] Delimiter
25 [ Delimiter
25 ] Delimiter
25 ) Delimiter
25 { Delimiter
27 var Reserved Word
27 { Delimiter
28 int Reserved Word
28 b Identifier
28 = Attribuition Operator
28 c Identifier
28 ; Delimiter
29 } Delimiter
31 local Reserved Word
31 . Delimiter
31 a Identifier
31 ( Delimiter
31 a Identifier
31 , Delimiter
31 d Identifier
31 , Delimiter
31 d Identifier
31 ) Delimiter
31 ; Delimiter
32 print Reserved Word
32 ( Delimiter
32 aa Identifier
32 ) Delimiter
32 ; Delimiter
33 read Reserved Word
33 ( Delimiter
33 pp Identifier
33 , Delimiter
33 m Identifier
33 ) Delimiter
33 ; Delimiter
35 while Reserved Word
35 ( Delimiter
35 b Identifier
35 == Relational Operator
35 -2 Number
35 ) Delimiter
35 { Delimiter
36 op Identifier
36 = Attribuition Operator
36 2 Number
36 ; Delimiter
37 } Delimiter
40 if Reserved Word
40 ( Delimiter
40 d Identifier
40 ) Delimiter
40 then Reserved Word
40 { Delimiter
41 c Identifier
41 = Attribuition Operator
41 c Identifier
41 ++ Arithmetic Increment Operator
41 ; Delimiter
42 } Delimiter
42 else Reserved Word
42 { Delimiter
43 print Reserved Word
43 ( Delimiter
43 d Identifier
43 ) Delimiter
43 ; Delimiter
44 } Delimiter
46 if Reserved Word
46 ( Delimiter
46 c Identifier
46 ) Delimiter
46 then Reserved Word
46 { Delimiter
48 } Delimiter
48 else Reserved Word
48 { Delimiter
49 print Reserved Word
49 ( Delimiter
49 d Identifier
49 ) Delimiter
49 ; Delimiter
50 } Delimiter
52 print Reserved Word
52 ( Delimiter
52 d Identifier
52 ) Delimiter
52 ; Delimiter
53 read Reserved Word
53 ( Delimiter
53 c Identifier
53 ) Delimiter
53 ; Delimiter
55 return Reserved Word
55 5 Number
55 + Arithmetic Operator
55 2 Number
55 ; Delimiter
56 } Delimiter
58 procedure Reserved Word
58 o Identifier
58 ( Delimiter
58 int Reserved Word
58 p Identifier
58 ) Delimiter
58 { Delimiter
59 var Reserved Word
59 { Delimiter
60 int Reserved Word
60 b Identifier
60 = Attribuition Operator
60 c Identifier
60 ; Delimiter
61 } Delimiter
63 local Reserved Word
63 . Delimiter
63 a Identifier
63 ( Delimiter
63 a Identifier
63 , Delimiter
63 d Identifier
63 , Delimiter
63 d Identifier
63 ) Delimiter
63 ; Delimiter
64 print Reserved Word
64 ( Delimiter
64 aa Identifier
64 ) Delimiter
64 ; Delimiter
66 print Reserved Word
66 ( Delimiter
66 "a" String
66 ) Delimiter
66 ; Delimiter
67 read Reserved Word
67 ( Delimiter
67 c Identifier
67 ) Delimiter
67 ; Delimiter
68 } Delimiter
70 function Reserved Word
70 int Reserved Word
70 opa Identifier
70 ( Delimiter
70 int Reserved Word
70 a Identifier
70 ) Delimiter
70 { Delimiter
71 return Reserved Word
71 bem Identifier
71 ; Delimiter
72 } Delimiter
74 procedure Reserved Word
74 ok Identifier
74 ( Delimiter
74 int Reserved Word
74 b Identifier
74 ) Delimiter
74 { Delimiter
75 if Reserved Word
75 ( Delimiter
75 d Identifier
75 == Relational Operator
75 e Identifier
75 ) Delimiter
75 then Reserved Word
75 { Delimiter
76 o Identifier
76 = Attribuition Operator
76 0 Number
76 ; Delimiter
77 } Delimiter
78 } Delimiter
80 start Reserved Word
80 ( Delimiter
80 ) Delimiter
80 { Delimiter
81 var Reserved Word
81 { Delimiter
82 int Reserved Word
82 b Identifier
82 [ Delimiter
82 3 Number
82 ] Delimiter
82 ; Delimiter
83 } Delimiter
85 local Reserved Word
85 . Delimiter
85 a Identifier
85 ( Delimiter
85 a Identifier
85 , Delimiter
85 2 Number
85 , Delimiter
85 "d" String
85 ) Delimiter
85 ; Delimiter
86 print Reserved Word
86 ( Delimiter
86 aa Identifier
86 ) Delimiter
86 ; Delimiter
88 print Reserved Word
88 ( Delimiter
88 "a" String
88 ) Delimiter
88 ; Delimiter
89 read Reserved Word
89 ( Delimiter
89 c Identifier
89 ) Delimiter
89 ; Delimiter
90 } Delimiter
----------------------------------------------------------------------


Lista de Erros Léxicos:
----------------------------------------------------------------------


Lista de Erros Sintáticos:

----------------------------------------------------------------------

