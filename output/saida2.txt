Lista de Tokens:
1 const Reserved Word
1 { Delimiter
2 int Reserved Word
2 a Identifier
2 2 Number
2 ; Delimiter
3 boolean Reserved Word
3 b Identifier
3 3 Number
3 ; Delimiter
4 } Delimiter
6 typedef Reserved Word
6 struct Reserved Word
6 o Identifier
6 { Delimiter
7 int Reserved Word
7 b Identifier
7 ; Delimiter
8 int Reserved Word
8 a Identifier
8 ; Delimiter
9 } Delimiter
11 var Reserved Word
11 { Delimiter
12 int Reserved Word
12 c Identifier
12 = Attribuition Operator
12 2 Number
12 ; Delimiter
13 int Reserved Word
13 a Identifier
13 = Attribuition Operator
13 2 Number
13 ; Delimiter
14 int Reserved Word
14 a Identifier
14 [ Delimiter
14 a Identifier
14 ] Delimiter
14 ; Delimiter
15 int Reserved Word
15 b Identifier
15 [ Delimiter
15 c Identifier
15 ] Delimiter
15 [ Delimiter
15 2 Number
15 ] Delimiter
15 ; Delimiter
16 } Delimiter
19 function Reserved Word
19 int Reserved Word
19 a Identifier
19 ( Delimiter
19 int Reserved Word
19 a Identifier
19 , Delimiter
19 real Reserved Word
19 b Identifier
19 [ Delimiter
19 ] Delimiter
19 [ Delimiter
19 ] Delimiter
19 ) Delimiter
19 { Delimiter
21 var Reserved Word
21 { Delimiter
22 int Reserved Word
22 b Identifier
22 = Attribuition Operator
22 c Identifier
22 ; Delimiter
23 } Delimiter
25 local Reserved Word
25 . Delimiter
25 a Identifier
25 ( Delimiter
25 a Identifier
25 , Delimiter
25 d Identifier
25 , Delimiter
25 d Identifier
25 ) Delimiter
25 ; Delimiter
26 print Reserved Word
26 ( Delimiter
26 aa Identifier
26 ) Delimiter
26 ; Delimiter
27 read Reserved Word
27 ( Delimiter
27 pp Identifier
27 , Delimiter
27 m Identifier
27 ) Delimiter
27 ; Delimiter
29 while Reserved Word
29 ( Delimiter
29 b Identifier
29 == Relational Operator
29 -2 Number
29 ) Delimiter
29 { Delimiter
30 op Identifier
30 = Attribuition Operator
30 2 Number
30 ; Delimiter
31 } Delimiter
34 if Reserved Word
34 ( Delimiter
34 d Identifier
34 ) Delimiter
34 then Reserved Word
34 { Delimiter
35 c Identifier
35 = Attribuition Operator
35 c Identifier
35 ++ Arithmetic Increment Operator
35 ; Delimiter
36 } Delimiter
36 else Reserved Word
36 { Delimiter
37 print Reserved Word
37 ( Delimiter
37 d Identifier
37 ) Delimiter
37 ; Delimiter
38 } Delimiter
40 if Reserved Word
40 ( Delimiter
40 c Identifier
40 ) Delimiter
40 then Reserved Word
40 { Delimiter
42 } Delimiter
42 else Reserved Word
42 { Delimiter
43 print Reserved Word
43 ( Delimiter
43 d Identifier
43 ) Delimiter
43 ; Delimiter
44 } Delimiter
46 print Reserved Word
46 ( Delimiter
46 d Identifier
46 ) Delimiter
46 ; Delimiter
47 read Reserved Word
47 ( Delimiter
47 c Identifier
47 ) Delimiter
47 ; Delimiter
49 return Reserved Word
49 5 Number
49 + Arithmetic Operator
49 2 Number
49 ; Delimiter
50 } Delimiter
52 procedure Reserved Word
52 o Identifier
52 ( Delimiter
52 int Reserved Word
52 p Identifier
52 ) Delimiter
52 { Delimiter
53 var Reserved Word
53 { Delimiter
54 int Reserved Word
54 b Identifier
54 = Attribuition Operator
54 c Identifier
54 ; Delimiter
55 } Delimiter
57 local Reserved Word
57 . Delimiter
57 a Identifier
57 ( Delimiter
57 a Identifier
57 , Delimiter
57 d Identifier
57 , Delimiter
57 d Identifier
57 ) Delimiter
57 ; Delimiter
58 print Reserved Word
58 ( Delimiter
58 aa Identifier
58 ) Delimiter
58 ; Delimiter
60 print Reserved Word
60 ( Delimiter
60 "a" String
60 ) Delimiter
60 ; Delimiter
61 read Reserved Word
61 ( Delimiter
61 c Identifier
61 ) Delimiter
61 ; Delimiter
62 } Delimiter
64 function Reserved Word
64 int Reserved Word
64 opa Identifier
64 ( Delimiter
64 int Reserved Word
64 a Identifier
64 ) Delimiter
64 { Delimiter
65 return Reserved Word
65 bem Identifier
65 ; Delimiter
66 } Delimiter
68 procedure Reserved Word
68 ok Identifier
68 ( Delimiter
68 int Reserved Word
68 b Identifier
68 ) Delimiter
68 { Delimiter
69 if Reserved Word
69 ( Delimiter
69 d Identifier
69 == Relational Operator
69 e Identifier
69 ) Delimiter
69 then Reserved Word
69 { Delimiter
70 o Identifier
70 = Attribuition Operator
70 0 Number
70 ; Delimiter
71 } Delimiter
72 } Delimiter
74 start Reserved Word
74 ( Delimiter
74 ) Delimiter
74 { Delimiter
75 var Reserved Word
75 { Delimiter
76 int Reserved Word
76 b Identifier
76 [ Delimiter
76 3 Number
76 ] Delimiter
76 ; Delimiter
77 } Delimiter
79 local Reserved Word
79 . Delimiter
79 a Identifier
79 ( Delimiter
79 a Identifier
79 , Delimiter
79 2 Number
79 , Delimiter
79 "d" String
79 ) Delimiter
79 ; Delimiter
80 print Reserved Word
80 ( Delimiter
80 aa Identifier
80 ) Delimiter
80 ; Delimiter
82 print Reserved Word
82 ( Delimiter
82 "a" String
82 ) Delimiter
82 ; Delimiter
83 read Reserved Word
83 ( Delimiter
83 c Identifier
83 ) Delimiter
83 ; Delimiter
84 } Delimiter

Lista de Erros:
